using Application.Accounts.Dto;
using Application.ActivityPurposes.Dto;
using Application.ActivityResults.Dto;
using Application.Activities.Dto;
using Application.BillTos.Dto;
using Application.FunnelLineProducts.Dto;
using Application.Extensions;
using Application.FunnelLineProducts.Dto;
using Application.Funnels.Dto;
using Application.JobPositions.Dtos;
using Application.KeyProducts.Dto;
using Application.Parties.Dto;
using Application.QuoteLineProducts.Dto;
using Application.Quotes.Dto;
using Application.SaleAgreement.Dto;
using Application.SaleOrderPlans.Dto;
using Application.SaleOrders.Dto;
using Application.Targets.Dtos;
using Application.WorkingPlans.Dtos;
using AutoMapper;
using Domain.Entities;
using Erp.Common.Constants;
using Newtonsoft.Json;

namespace Application.Common.Mapping;

public interface IMapFrom<T>
{
    void Mapping(Profile profile)
    {
        if (typeof(T) == typeof(Account))
        {

            profile.CreateMap<Account, AccountGeneralInfoDto>()
                .ForMember(a => a.BillTo, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        (src.BillTos != null && src.BillTos.Count > 0) ? src.BillTos[0] : null);
                });
            profile.CreateMap<Account, AccountFinanceAccountingDto>();
            profile.CreateMap<Account, AccountOrientationDto>();
            profile.CreateMap<Account, AccountForSODto>()
                .ForMember(d => d.BillTo, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Address);
                });
            profile.CreateMap<Account, AccountContactDto>();
            profile.CreateMap<Account, AccountSimplifiedDto>();

            profile.CreateMap<Account, ExportAccountDto>()
                .ForMember(d => d.PartyName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Party?.Name);
                })
                .ForMember(d => d.PartyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Party?.Code);
                })
                .ForMember(d => d.AccountType, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.AccountType.HasValue ? src.AccountType.Value.GetText() : "");
                })
                .ForMember(d => d.Status, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Status.HasValue ? src.Status.Value.GetText() : "");
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ShipTos?.FirstOrDefault(t => t.IsDefault == true)?.CombinedAddress);
                });
            profile.CreateMap<Account, WorkingPlanByCustomerDto>()
                .ForMember(d => d.CustomerId,
                    op => { op.MapFrom((src, dest, destMember, context) => src.Id); })
                .ForMember(d => d.CustomerName,
                    op => op.MapFrom((src, _, _, _) => src.AccountName ?? ""))
                .ForMember(d => d.SAs,
                    op => op.MapFrom((src, _, _, _) =>
                        (src.SAs).Concat(src.SAByEndUsers.Where(f => f.EndUserId != f.AccountId)).OrderBy(sa => sa.SaDate).ToList()))
                .ForMember(d => d.Funnels,
                    op => op.MapFrom((src, _, _, _) =>
                        (src.Funnels).Concat(
                            src.FunnelByEndUsers.Where(f => f.EndUserId != f.AccountId)).OrderBy(sa => sa.EstClosedDate).ToList()))
                .ForMember(d => d.KPITarget,
                    op => op.MapFrom(src =>
                        src.KeyAccounts.Sum(k => k.Targets.Where(t => t.Type == TargetType.KPI).Sum(t => t.Amount))))
                .ForMember(d => d.OKRTarget,
                    op => op.MapFrom(src =>
                        src.KeyAccounts.Sum(k => k.Targets.Where(t => t.Type == TargetType.OKR).Sum(t => t.Amount))))
                .ForMember(d => d.Revenue,
                    op => op.MapFrom((src, _, _, _) =>
                        (src.SAs).Concat(src.SAByEndUsers.Where(f => f.EndUserId != f.AccountId))
                        .Sum(sa => sa.TotalAmountAfterVat) ?? 0))
                .ForMember(d => d.Debt, op => op.MapFrom((src, _, _, _) => 200000000))
                .ForMember(d => d.DebtDayCount, op => op.MapFrom((src, _, _, _) => -10))
                ;
            profile.CreateMap<Account, AccountDto>().ForMember(t => t.EndUsers, op =>
                op.MapFrom((src, dest, destMember, context) => src.AccountEndUsers))
                .ForMember(a => a.BillTo, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        (src.BillTos != null && src.BillTos.Count > 0) ? src.BillTos[0] : null);
                });
            profile.CreateMap<Account, EndUserDto>();
        }
        else if (typeof(T) == typeof(Quote))
        {
            profile.CreateMap<Quote, QuoteDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.AccountGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountGroupCode);
                })
                .ForMember(d => d.AccountTaxCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.TaxCode);
                })
                .ForMember(d => d.CreditGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.CreditGroupCode);
                })
                .ForMember(d => d.FunnelName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Funnel?.FunnelName);
                })
                .ForMember(d => d.ContactPerson, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ContactAccounts?.FirstOrDefault(en => en.ContactId == src.ContactId)?.Contact
                            ?.Name);
                })
                // .ForMember(d => d.BillToAddress, option =>
                // {
                //     option.MapFrom((src, dest, destMember, context) =>
                //         src.Account?.BillTo?.CombinedAddress);
                // })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ShipTos?.FirstOrDefault(en => en.Id == src.ShipToId)?.CombinedAddress);
                })
                .ForMember(d => d.Status, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.DateExpired.AddDays(1).Date < DateTime.Now.Date ? StatusQuote.Expire : src.Status);
                });
            profile.CreateMap<Quote, ExportQuoteDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.AccountGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountGroupCode);
                })
                .ForMember(d => d.AccountTaxCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.TaxCode);
                })
                .ForMember(d => d.CreditGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.CreditGroupCode);
                })
                .ForMember(d => d.FunnelName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Funnel?.FunnelName);
                })
                .ForMember(d => d.ContactPerson, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ContactAccounts?.FirstOrDefault(en => en.ContactId == src.ContactId)?.Contact
                            ?.Name);
                })
                .ForMember(d => d.BillToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.Address);
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ShipTos?.FirstOrDefault(en => en.Id == src.ShipToId)?.CombinedAddress);
                })
                .ForMember(d => d.Status,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) =>
                            src.DateExpired.AddDays(1).Date < DateTime.Now.Date
                                ? StatusQuote.Expire.GetText()
                                : src.Status.GetText());
                    })
                .ForMember(d => d.PaymentType,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) =>
                            src.PaymentType.HasValue ? src.PaymentType.Value.GetText() : "");
                    })
                .ForMember(d => d.PaymentTermCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.PaymentTermObj?.Code);
                });
            profile.CreateMap<Quote, QuoteExcelDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.AccountGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountGroupCode);
                })
                .ForMember(d => d.AccountTaxCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.TaxCode);
                })
                .ForMember(d => d.CreditGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.CreditGroupCode);
                })
                .ForMember(d => d.FunnelName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Funnel?.FunnelName);
                })
                .ForMember(d => d.ContactPerson, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ContactAccounts?.FirstOrDefault(en => en.ContactId == src.ContactId)?.Contact
                            ?.Name);
                })
                .ForMember(d => d.BillToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.Address);
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.ShipTos?.FirstOrDefault(en => en.Id == src.ShipToId)?.CombinedAddress);
                });
            profile.CreateMap<Quote, ExportQuoteLineProductDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.PaymentTermCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.PaymentTermObj?.Code + " - " + src.PaymentTermObj?.Description);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.Status, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Status.GetText());
                })
                .ForMember(d => d.QuoteCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Code);
                })
                .ForMember(d => d.QuoteName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Name);
                });
        }
        else if (typeof(T) == typeof(QuoteLineProduct))
        {
            profile.CreateMap<QuoteLineProduct, ExportQuoteLineProductDto>()
                .ForMember(d => d.Amount, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.AmountAfterVat - src.AmountVat);
                });
            profile.CreateMap<QuoteLineProduct, QuoteLineProductDto>();
        }
        else if (typeof(T) == typeof(SA))
        {
            profile.CreateMap<SA, SAActionDto>();
            profile.CreateMap<SA, SAGuaranteeDto>();
            profile.CreateMap<SA, SAAdvancePaymentDto>();
            profile.CreateMap<SA, SAForSODto>();
            profile.CreateMap<SA, SALinesDto>();
            profile.CreateMap<SA, SAForAccountEnduserDto>();
            profile.CreateMap<SA, SADto>()
                .ForMember(t => t.EndUserName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.EndUser?.AccountName);
                })
                .ForMember(t => t.AcceptanceDate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.AcceptanceSAs != null ? src.AcceptanceSAs.Where(t => t.Date != null).OrderByDescending(t => t.Date).Select(t => t.Date).FirstOrDefault() : null);
                });
            profile.CreateMap<SA, SAExcelDto>();

            profile.CreateMap<SA, ExportSADto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.Type, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Type.GetText());
                })
                .ForMember(d => d.Status, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Status.GetTextExcel());
                })
                .ForMember(d => d.ReleaseStatus, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ReleaseStatus.GetText());
                })
                .ForMember(d => d.EndUser, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.EndUser?.AccountName);
                })
                .ForMember(d => d.OrderChannel, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.OrderChannel.HasValue ? src.OrderChannel.Value.GetDescription() : "");
                })
                .ForMember(d => d.StatusRecoverSA, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.StatusRecoverSA.HasValue ? src.StatusRecoverSA.Value.GetText() : "");
                })
                ;

            profile.CreateMap<SA, ExportSaLineProductDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.EndUser, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.EndUser?.AccountName);
                })
                .ForMember(d => d.PaymentTerm, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.PaymentTermObj?.Code);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.Type, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Type.GetText());
                })
                .ForMember(d => d.Status, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Status.GetTextExcel());
                })
                .ForMember(d => d.ReleaseStatus, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ReleaseStatus.GetText());
                })
                .ForMember(d => d.OrderChannel, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.OrderChannel.HasValue ? src.OrderChannel.Value.GetDescription() : "");
                });

            profile.CreateMap<SA, WorkingPlanSADto>()
                .ForMember(d => d.Revenue,
                    op => op.MapFrom((src, _, _, _) => src.SOs.Sum(so => so.TotalAmountAfterVat)))
                .ForMember(d => d.Target, op => op.MapFrom((src, _, _, _) => src.TotalAmountAfterVat))
                .ForMember(d => d.IsdExpiredRecover,
                    op => op.MapFrom((src, _, _, _) =>
                        src.ExpectedRecoverDate < DateTime.Now && src.StatusRecoverSA != StatusRecoverSA.Recovered))
                .ForMember(d => d.Status, op => op.MapFrom((src, _, _, _) =>
                    src.SaEndDate < DateTime.Now
                        ? WorkingPlanSAStatus.Expired
                        : src.Status switch
                        {
                            SAStatus.Draft or SAStatus.Awaiting_Approval or SAStatus.Denied or SAStatus.Approved
                                or SAStatus.SyncFailed => WorkingPlanSAStatus.Draft,
                            SAStatus.SyncSuccess or SAStatus.Processing => WorkingPlanSAStatus.Processing,
                            _ => WorkingPlanSAStatus.Expired
                        }
                ))
                .ForMember(d => d.AccountCode, op => op.MapFrom((src, _, _, _) => src.Account.AccountCode))
                .ForMember(d => d.AccountName, op => op.MapFrom((src, _, _, _) => src.Account.AccountName))
                ;
            ;
        }
        else if (typeof(T) == typeof(SALineProduct))
        {
            profile.CreateMap<SALineProduct, ExportSaLineProductDto>()
                .ForMember(d => d.Amount, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.AmountAfterVat - src.AmountVat);
                });
        }
        else if (typeof(T) == typeof(SO))
        {
            profile.CreateMap<SO, SODto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ShipTo?.CombinedAddress);
                })
                .ForMember(d => d.SalepersonName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonName ?? src.Quote?.Saleman);
                })
                .ForMember(d => d.SalepersonCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonCode ?? src.Quote?.SalemanCode);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.CurrencyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CurrencyCode ?? src.Quote?.CurrencyCode);
                })
                .ForMember(d => d.ConversionRate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConversionCoefficient ?? src.Quote?.CurrencyRate);
                })
                .ForMember(d => d.QuoteCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Quote?.Code);
                })
                .ForMember(d => d.SOReferenceCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SOReference?.SOCode);
                })
                .ForMember(d => d.ReturnReason, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        (src.IsOtherReturnReason ?? false) ? src.ReturnReason : src.ReturnReasonObj?.ReasonDescription);
                });
            profile.CreateMap<SO, SODtoFullData>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ShipTo?.CombinedAddress);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.Priority,
                    option => { option.MapFrom((src, dest, destMember, context) => src.Priority.GetText()); })
                .ForMember(d => d.CreditGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CreditGroupCode ?? src.Quote?.Account?.CreditGroupCode);
                })
                .ForMember(d => d.AccountGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.AccountGroupCode ?? src.Quote?.Account?.AccountGroupCode);
                })
                .ForMember(d => d.BillTo, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.BillTo);
                })
                .ForMember(d => d.SAVersion, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.Version);
                })
                .ForMember(d => d.CurrencyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CurrencyCode);
                })
                .ForMember(d => d.ConversionRate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConversionCoefficient);
                })
                .ForMember(d => d.SANumber, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.Number);
                })
                .ForMember(d => d.SalepersonName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonName ?? src.Quote?.Saleman);
                })
                .ForMember(d => d.SalepersonCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonCode ?? src.Quote?.SalemanCode);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.PaymentTerm, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.PaymentTerm?.Code + " - " + src.PaymentTerm?.Description);
                })
                .ForMember(d => d.CurrencyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CurrencyCode ?? src.Quote?.CurrencyCode);
                })
                .ForMember(d => d.ConversionRate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConversionCoefficient ?? src.Quote?.CurrencyRate);
                })
                .ForMember(d => d.QuoteCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Quote?.Code);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.OrderChannel, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.OrderChannel.GetDescription());
                })
                .ForMember(d => d.SOReferenceCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SOReference?.SOCode);
                })
                .ForMember(d => d.ConfirmTime, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ConfirmTime ?? (src.SA?.ConfirmTime == null ? null : DateTime.Parse(src.SA?.ConfirmTime)));
                });
            profile.CreateMap<SO, ExportSODto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.ShipToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.ShipTo?.CombinedAddress);
                })
                .ForMember(d => d.Priority, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Priority.GetText());
                })
                .ForMember(d => d.OrderChannel, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.OrderChannel.GetDescription());
                })
                .ForMember(d => d.SOStatus, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SOStatus.HasValue ? src.SOStatus.Value.GetText() : "");
                })
                .ForMember(d => d.IntegrationStatus, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.IntegrationStatus.GetText());
                })
                .ForMember(d => d.AccountGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.AccountGroupCode ?? src.Quote?.Account?.AccountGroupCode);
                })
                .ForMember(d => d.CreditGroupCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CreditGroupCode ?? src.Quote?.Account?.CreditGroupCode);
                })
                .ForMember(d => d.BillTo, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.BillTo);
                })
                .ForMember(d => d.SAVersion, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.Version);
                })
                .ForMember(d => d.CurrencyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CurrencyCode);
                })
                .ForMember(d => d.ConversionRate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConversionCoefficient);
                })
                .ForMember(d => d.SANumber, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.Number);
                })
                .ForMember(d => d.SalepersonName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonName ?? src.Quote?.Saleman);
                })
                .ForMember(d => d.SalepersonCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SalepersonCode ?? src.Quote?.SalemanCode);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.PaymentTermCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.PaymentTerm?.Code);
                })
                .ForMember(d => d.CurrencyCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.CurrencyCode ?? src.Quote?.CurrencyCode);
                })
                .ForMember(d => d.ConversionRate, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConversionCoefficient ?? src.Quote?.CurrencyRate);
                })
                .ForMember(d => d.QuoteCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Quote?.Code);
                })
                .ForMember(d => d.SupportCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.SupportCode);
                })
                .ForMember(d => d.ConfirmTime, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.SA?.ConfirmTime);
                });

            profile.CreateMap<SO, SOLinesDto>();
            profile.CreateMap<SOLine, Application.SOLines.Dto.SOLineDto>()
                .ForMember(d => d.QuantitySA,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) => src.SO?.SA?.SALines.Select(line =>
                            line?.SALineProducts?.FirstOrDefault(lp => lp.Id == src.LineNoSa)?.Quantity ?? 0).Sum());
                    })
                .ForMember(d => d.QuantitySold,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) => src.SO?.SA?.SALines.Select(line =>
                                line?.SALineProducts?.FirstOrDefault(lp => lp.Id == src.LineNoSa)?.QuantitySold ?? 0)
                            .Sum());
                    });
            profile.CreateMap<SO, ExportSOLinesDto>();
            profile.CreateMap<SO, WorkingPlanSODto>()
                .ForMember(d => d.Number, op => op.MapFrom((src, _, _, _) => src.SOCode))
                .ForMember(d => d.SODate, op => op.MapFrom((src, _, _, _) => src.CreatedDate))
                .ForMember(d => d.Status, op => op.MapFrom((src, _, _, _) => src.SOStatus))
                .ForMember(d => d.CurrencyCode, op => op.MapFrom((src, _, _, _) => src.SA?.CurrencyCode))
                // .ForMember(d => d.CurrencySymbol,
                //     op => op.MapFrom((src, _, _, _) =>
                //         src.SA?.CurrencyCode == null
                //             ? ""
                //             : CurrencyConverter.ConvertCurrencyCodeToSymbol(src.SA?.CurrencyCode)))
                .ForMember(d => d.CreateFromQuote, op => op.MapFrom((src, _, _, _) => src.QuoteId != null))
                ;
        }
        else if (typeof(T) == typeof(SOPlan))
        {
            profile.CreateMap<SOPlan, WorkingPlanSOPlanDto>()
                .ForMember(d => d.Number, op => op.MapFrom((src, _, _, _) => src.SOPlanCode))
                .ForMember(d => d.CurrencyCode, op => op.MapFrom((src, _, _, _) => src.SA?.CurrencyCode))
                // .ForMember(d => d.CurrencySymbol,
                //     op => op.MapFrom((src, _, _, _) =>
                //         CurrencyConverter.ConvertCurrencyCodeToSymbol(src.SA?.CurrencyCode)))
                ;
            profile.CreateMap<SOPlan, SOPlanDtoFullData>();
            profile.CreateMap<SOPlan, SOPlanDto>();
            profile.CreateMap<SOPlan, SOPlanLinesDto>();
            profile.CreateMap<SOPlanLine, Application.SOPlanLines.Dto.SOPlanLineDto>()
                .ForMember(d => d.QuantitySA,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) => src.SOPlan?.SA?.SALines.Select(line =>
                            line?.SALineProducts?.FirstOrDefault(lp => lp.Id == src.LineNoSa)?.Quantity ?? 0).Sum());
                    })
                .ForMember(d => d.QuantitySold,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) => src.SOPlan?.SA?.SALines.Select(line =>
                                line?.SALineProducts?.FirstOrDefault(lp => lp.Id == src.LineNoSa)?.QuantitySold ?? 0)
                            .Sum());
                    })
            .ForMember(d => d.QuantityFunnel,
                    option =>
                    {
                        option.MapFrom((src, dest, destMember, context) => src.SOPlan?.Funnel?.FunnelLines.Select(line =>
                                line?.FunnelProducts?.FirstOrDefault(lp => lp.Id == src.LineNoFunnel)?.Quantity ?? 0)
                            .Sum());
                    });
        }
        else if (typeof(T) == typeof(Party))
        {
            profile.CreateMap<Party, PartyListDto>()
                .ForMember(d => d.AccountNums, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Accounts?.Count());
                });
            profile.CreateMap<Party, PartyDto>()
                .ForMember(d => d.AccountNums, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Accounts?.Count());
                });
        }
        else if (typeof(T) == typeof(Funnel))
        {
            profile.CreateMap<Funnel, FunnelDto>()
                .ForMember(d => d.Enduser, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.EndUser?.AccountName);
                });

            profile.CreateMap<Funnel, FunnelWithoutAccountDto>().ForMember(d => d.Enduser, option =>
            {
                option.MapFrom((src, dest, destMember, context) =>
                    src.EndUser?.AccountName);
            });

            profile.CreateMap<Funnel, FunnelOfCategoryDto>();
            profile.CreateMap<Funnel, FunnelManagementDto>();
            profile.CreateMap<Funnel, FunnelWithoutAccountDto>();
            profile.CreateMap<Funnel, FunnelForAccountEnduserDto>();
            profile.CreateMap<Funnel, ExportFunnelDto>()
                .ForMember(d => d.AccountName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountName);
                })
                .ForMember(d => d.AccountCode, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.AccountCode);
                })
                .ForMember(d => d.Stage, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Stage.GetText());
                })
                .ForMember(d => d.FunnelStatus, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.FunnelStatus.HasValue ? src.FunnelStatus.Value.GetText() : "");
                })
                .ForMember(d => d.BillToAddress, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.GetBillToCombineAddress());
                })
                .ForMember(d => d.Province, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Account?.BillTos != null && src.Account?.BillTos.Count > 0 ? src.Account?.BillTos?[0].Province : "");
                })
                .ForMember(d => d.Enduser, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.EndUser?.AccountName);
                });
            profile.CreateMap<Funnel, WorkingPlanFunnelDto>()
                .ForMember(d => d.Number, op => op.MapFrom((src, _, _, _) => src.FunnelCode))
                .ForMember(d => d.Name, op => op.MapFrom((src, _, _, _) => src.FunnelName))
                .ForMember(d => d.ExpectedSADate, op => op.MapFrom((src, _, _, _) => src.EstClosedDate))
                .ForMember(d => d.SOPlans, op => op.MapFrom((src, _, _, _) => src.SOPlans))
                .ForMember(d => d.Target, op => op.MapFrom((src, _, _, _) => src.EstRevenue))
                .ForMember(d => d.Color,
                    op => op.MapFrom((src, _, _, _) =>
                        src.EstClosedDate != null && src.EstClosedDate?.AddDays(1).AddMilliseconds(-1) < DateTime.Now
                            ? FunnelColor.Gray
                            : (src.EstClosedDate != null && src.EstReleaseHSDTDate != null &&
                               src.EstClosedDate - src.EstReleaseHSDTDate < TimeSpan.FromDays(30)) ||
                              ((int)src.Stage > 60 && (int)src.Stage <= 80 && src.WinRate < 50)
                                ? FunnelColor.Red
                                : src.Account != null &&
                                  (src.Account.Status != StatusAccount.SYNCHRONIZED ||
                                  (src.Account.AccountGroupCode == "CSYT-CONGLAP" &&
                                   src.EstClosedDate != null && src.EstReleaseHSDTDate != null &&
                                   src.EstClosedDate - src.EstReleaseHSDTDate < TimeSpan.FromDays(60))
                                  || ((int)src.Stage > 40 && (int)src.Stage <= 60 && src.WinRate < 50))
                                    ? FunnelColor.Yellow
                                    : FunnelColor.Green))
                .ForMember(d => d.AccountCode, op => op.MapFrom((src, _, _, _) => src.Account.AccountCode))
                .ForMember(d => d.AccountName, op => op.MapFrom((src, _, _, _) => src.Account.AccountName));

            //profile.CreateMap<FunnelProduct, FunnelLineProductSimplifiedDto>()
            //    .ForMember(d => d.VariantId, option =>
            //    {
            //        option.MapFrom((src, dest, destMember, context) =>
            //            src.FunnelLine.VariantId);
            //    });
        }
        else if (typeof(T) == typeof(BillTo))
        {
            profile.CreateMap<BillTo, BillToDto>()
                .ForMember(d => d.City, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.CityObj?.Name);
                })
                .ForMember(d => d.District, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.DistrictObj?.Name);
                })
                .ForMember(d => d.Ward, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.WardObj?.Name);
                });
        }
        // else if (typeof(T) == typeof(FunnelLine))
        // {
        //     profile.CreateMap<FunnelLine, FunnelLineDto>();
        // }
        else if (typeof(T) == typeof(FunnelProduct))
        {
            profile.CreateMap<FunnelProduct, FunnelLineProductDto>();
            profile.CreateMap<FunnelProduct, FunnelLineProductSimplifiedDto>()
                .ForMember(d => d.VariantId, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.FunnelLine.VariantId);
                });
            profile.CreateMap<FunnelProduct, ExportFunnelLineProductDto>();

        }
        else if (typeof(T) == typeof(FunnelSupporter))
        {
            profile.CreateMap<FunnelSupporter, FunnelSupporterDto>()
                .ForMember(d => d.UserRole, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.UserRole?.Name);
                });
        }
        else if (typeof(T) == typeof(Target))
        {
            profile.CreateMap<Target, TargetDto>();
            // profile.CreateMap<Target, WorkingPlanByCustomerDto>()
            //     .ForMember(d => d.CustomerId,
            //         op => { op.MapFrom((src, dest, destMember, context) => src.KeyAccount?.AccountId); })
            //     .ForMember(d => d.CustomerName,
            //         op => op.MapFrom((src, _, _, _) => src.KeyAccount?.Account.AccountName ?? ""))
            //     .ForMember(d => d.SAs,
            //         op => op.MapFrom((src, _, _, _) =>
            //             (src.KeyAccount?.Account.SAs ?? new List<SA>())
            //             .Concat(src.KeyAccount?.Account.SAByEndUsers ?? new List<SA>()).OrderBy(sa => sa.SaDate)
            //             .ToList()))
            //     .ForMember(d => d.Funnels,
            //         op => op.MapFrom((src, _, _, _) =>
            //             (src.KeyAccount?.Account.Funnels ?? new List<Funnel>()).Concat(
            //                 src.KeyAccount?.Account.FunnelByEndUsers ?? new List<Funnel>()).OrderBy(f => f.EstClosedDate)))
            //     .ForMember(d => d.KPITarget, op => op.MapFrom(src => src.Type == TargetType.KPI ? src.Amount : 0))
            //     .ForMember(d => d.OKRTarget, op => op.MapFrom(src => src.Type == TargetType.OKR ? src.Amount : 0))
            //     .ForMember(d => d.Revenue,
            //         op => op.MapFrom((src, _, _, _) =>
            //             (src.KeyAccount?.Account.SAs ?? new List<SA>()).Concat(src.KeyAccount?.Account.SAByEndUsers ??
            //                                                                    new List<SA>())
            //             .Sum(sa => sa.TotalAmountAfterVat) ?? 0))
            //     .ForMember(d => d.Debt, op => op.MapFrom((src, _, _, _) => 200000000))
            //     .ForMember(d => d.DebtDayCount, op => op.MapFrom((src, _, _, _) => -10))
            //     ;
        }
        else if (typeof(T) == typeof(ActivityPurpose))
        {
            profile.CreateMap<ActivityPurpose, ActivityPurposeDto>()
                .ForMember(d => d.PurposeId, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Purpose?.Id);
                })
                .ForMember(d => d.PurposeName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Purpose?.Name);
                });
        }
        else if (typeof(T) == typeof(ActivityResult))
        {
            profile.CreateMap<ActivityResult, ActivityResultDto>()
                .ForMember(d => d.PurposeId, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Purpose?.Id);
                })
                .ForMember(d => d.PurposeName, option =>
                {
                    option.MapFrom((src, dest, destMember, context) =>
                        src.Purpose?.Name);
                });
        }
        else if (typeof(T) == typeof(Activity))
        {
            profile.CreateMap<Activity, ActivityDto>();
            profile.CreateMap<Activity, ActivityOfCategoryDto>();
            profile.CreateMap<Activity, WorkingPlanActivityDto>()
                .ForMember(d => d.SalespersonName, op => op.MapFrom((src, _, _, _) => src.ImplementerName))
                .ForMember(d => d.ExecuteDate, op => op.MapFrom((src, _, _, _) => src.ImplementDate))
                .ForMember(d => d.Type, op => op.MapFrom((src, _, _, _) => src.ActivityType?.Name ?? ""));
        }
        else if (typeof(T) == typeof(WorkingPlanByCustomerJsonDto))
        {
            profile.CreateMap<WorkingPlanByCustomerJsonDto, WorkingPlanByCustomerDto>()
                .ForMember(d => d.SAs, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanSADto>>(src.SAs)))
                .ForMember(d => d.Funnels, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanFunnelDto>>(src.Funnels)));
        }
        else if (typeof(T) == typeof(WorkingPlanSAJsonDto))
        {
            profile.CreateMap<WorkingPlanSAJsonDto, WorkingPlanSADto>()
            .ForMember(d => d.SOs, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanSODto>>(src.SOs)))
                .ForMember(d => d.SOPlans, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanSOPlanDto>>(src.SOPlans)))
                .ForMember(d => d.Activities, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanActivityDto>>(src.Activities)));
        }
        else if (typeof(T) == typeof(WorkingPlanFunnelJsonDto))
        {
            profile.CreateMap<WorkingPlanFunnelJsonDto, WorkingPlanFunnelDto>()
                .ForMember(d => d.SOs, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanSODto>>(src.SOs)))
                .ForMember(d => d.SOPlans, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanSOPlanDto>>(src.SOPlans)))
                .ForMember(d => d.Activities, op => op.MapFrom((src, _, _, _) => JsonConvert.DeserializeObject<List<WorkingPlanActivityDto>>(src.Activities)));
        }
        else if (typeof(T) == typeof(JobPosition))
        {
            profile.CreateMap<JobPosition, JobPositionSaleDto>()
                .ForMember(d => d.EmployeeCode, op => op.MapFrom((src, _, _, _) => src.CurrentEmployee?.ProfileCode ?? ""))
                .ForMember(d => d.EmployeeName, op => op.MapFrom((src, _, _, _) => src.CurrentEmployee?.Name ?? ""));
        }
        else
        {
            profile.CreateMap(typeof(T), GetType());
        }
    }


    private static List<T> DeserializeList<T>(string jsonString)
    {
        try
        {
            return JsonConvert.DeserializeObject<List<T>>(jsonString) ?? new List<T>();
        }
        catch (JsonException ex)
        {
            // Log the error message
            Console.WriteLine($"Error deserializing JSON to List<{typeof(T).Name}>: {ex.Message}");
            return new List<T>();
        }
    }
}
